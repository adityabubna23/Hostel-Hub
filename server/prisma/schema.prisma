generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  password  String
  role      Role    @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime @default(now())

   studentRoom StudentRoom?

  // Relations
  attendance       Attendance[]
  fees             Fees[]
  
  complaints       MessComplaint[]
  roomChangeRequests RoomChangeRequest[]
  entryExitLogs    EntryExitLog[]

  studentDocuments StudentDocument[]
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

// ðŸ“Œ Attendance Tracking
model Attendance {
  id        String   @id @default(uuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  date      DateTime @default(now())
  status    String   // Present, Absent, Late
}

// ðŸ“Œ Mess Menu
model MessMenu {
  id        String   @id @default(uuid())
  day       String   // Monday, Tuesday, etc.
  breakfast String
  lunch     String
  dinner    String
}

// ðŸ“Œ Mess Complaints
model MessComplaint {
  id        String   @id @default(uuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  complaint String
  complaintNumber String   @unique 
  createdAt DateTime @default(now())
}

// ðŸ“Œ Fees Management
model Fees {
  id        String   @id @default(uuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  amount    Float
  status    String   // Paid, Pending
  receipt   String?  // Receipt URL
}


// ðŸ“Œ Room Change Request
model RoomChangeRequest {
  id        String   @id @default(uuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  reason    String
  currentRoom  String
  desiredRoom  String
  status    String   @default("Pending") // Approved, Rejected, Pending
  createdAt DateTime @default(now())
}

// ðŸ“Œ Notices (Posted by Warden)
model Notice {
  id          String   @id @default(uuid())
  title       String
  content     String?  // Optional if a document is uploaded
  documentUrl String?  // URL of the uploaded document
  createdAt   DateTime @default(now())
  targetRoles String[] // Array of roles to target (e.g., ["Student", "Warden"])
}

// ðŸ“Œ Inventory Management
model Inventory {
  id        String   @id @default(uuid())
  item      String
  quantity  Int
}

// ðŸ“Œ Entry & Exit Log
model EntryExitLog {
  id        String   @id @default(uuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  type      String   // Entry or Exit
  timestamp DateTime @default(now())
}

model Floor {
  id    String @id @default(uuid())
  name  String @unique
  rooms Room[]
}

model Room {
  id       String   @id @default(uuid())
  name     String   @unique
  floor    Floor    @relation(fields: [floorId], references: [id])
  floorId  String
  capacity Int
  studentRoom StudentRoom?
}

model StudentRoom {
  id        String @id @default(uuid())
  student   User   @relation(fields: [studentId], references: [id])
  studentId String @unique
  room      Room   @relation(fields: [roomId], references: [id])
  roomId    String @unique
}

model StudentDocument {
  id          String   @id @default(uuid())
  student     User     @relation(fields: [studentId], references: [id])
  studentId   String
  documentUrl String    // URL of the uploaded document
  documentType String   // Type of document (e.g., "ID Proof", "Address Proof")
  status      String    @default("Pending") // Pending, Verified, Rejected
  uploadedAt  DateTime  @default(now())
}



